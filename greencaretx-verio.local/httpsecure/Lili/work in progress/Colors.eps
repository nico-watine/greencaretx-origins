%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.0%%For: (Bocanegra, Lili) ()%%Title: (Colors.eps)%%CreationDate: 2/4/08 12:10 PM%%BoundingBox: 99 56 529 728%%HiResBoundingBox: 99.9268 56.3047 528.9033 727.2695%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 65537 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_Cropmarks: 0 0 612 792%AI3_TemplateBox: 306.5 395.5 306.5 395.5%AI3_TileBox: 18 40 594 774%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 0%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -875 1343 0.6667 1841 1115 18 0 0 73 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 100 8 100 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MO%AI7_Thumbnail: 84 128 8%%BeginData: 17880 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45515151275151512751515127515151275151512751515127515151%2751515127515151275126A7FD05FFA7517C517C7C7C517C7C7C517C7C7C%517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C517DFF2651275126%512751265127512651275126512751265127512651275126512751265127%5126517DFD05FF7C7C517C517C517C517C517C517C517C517C517C517C51%7C517C517C517C517C517C517C517C7CFF51275151512751515127515151%27515151275151512751515127515151275151512751515126A7FD05FF7D%517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C%7C7C517C7C7C517DFF265126512651265126512651265126512651265126%51265126512651265126512651265126267CFD05FF7C7B517C517C517C51%7C517C517C517C517C517C517C517C517C517C517C517C517C517C517B7C%FF5127515151275151512751515127515151275151512751515127515151%275151512751515126A7FD05FF7D517C7C7C517C7C7C517C7C7C517C7C7C%517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C51A7FF27512651275126%512751265127512651275126512751265127512651275126512751265127%267CFD05FF7C7C517C517C517C517C517C517C517C517C517C517C517C51%7C517C517C517C517C517C517C7CFF515151275151512751515127515151%27515151275151512751515127515151275151512751267DFD05FF7D517C%517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C%7C7C517C517DFF2651265126512651265126512651265126512651265126%5126512651265126512651265126277CFD05FF7C7C517C517C517C517C51%7C517C517C517C517C517C517C517C517C517C517C517C517C517C7CFF51%515127515151275151512751515127515151275151512751515127515151%27515151275126A7FD05FFA7517C517C7C7C517C7C7C517C7C7C517C7C7C%517C7C7C517C7C7C517C7C7C517C7C7C517C517DFF265127512651275126%51275126512751265127512651275126512751265127512651275126517D%FD05FF7C7C517C517C517C517C517C517C517C517C517C517C517C517C51%7C517C517C517C517C517C7CFF5127515151275151512751515127515151%275151512751515127515151275151512751515126A7FD05FF7D517C7C7C%517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C%7C7C517DFF26512651265126512651265126512651265126512651265126%512651265126512651265126267CFD05FF7C7B517C517C517C517C517C51%7C517C517C517C517C517C517C517C517C517C517C517C517B7CFF512751%515127515151275151512751515127515151275151512751515127515151%2751515126A7FD05FF7D517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C%517C7C7C517C7C7C517C7C7C517C7C7C51A7FF2751265127512651275126%5127512651275126512751265127512651275126512751265127267CFD05%FF7C7C517C517C517C517C517C517C517C517C517C517C517C517C517C51%7C517C517C517C517C7CFF51515127515151275151512751515127515151%275151512751515127515151275151512751267DFD05FF7D517C517C7C7C%517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C%517DFF265126512651265126512651265126512651265126512651265126%51265126512651265126277CFD05FF7C7C517C517C517C517C517C517C51%7C517C517C517C517C517C517C517C517C517C517C517C7CFF5151512751%5151275151512D5151512D51515127515151275151512751515127515151%275126A7FD05FFA7517C517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C%517C7C7C517C7C7C517C7C7C517C517DFF26512751265126512651262726%512727265127512651275126512651262726512651265126517DFD05FF7C%7C517C517C517C517C517C517C7B7C517C7B7C517C577C517C517C517C51%7C517C577C517C7CFF512751515126272751262727512727262727512627%2651272726512727262751272627265126A7FD05FF7D517C517C517C5151%277C7C7C2751517C5151517C7B522751517C5251277C7C7C27527C7C517D%FF26512651F827F851262726512627F8512651F827265126272651265126%51F8512651262726267CFD05FF7C7B5151272751272727267C2651262751%FD042751F851F8515127275151522651517C517B7CFF5127515127262727%27F8272751F8FD07272651F82726515151F82751512627275126A7FD05FF%7D515227272652277C7C4B27277C7C272727A6512727527C512752275251%7C2727517C7C7C51A7FF27512651F827F851F827262726272651F827F851%2627F8272727F8512627F8512751262726277CFD05FF7C7C512727275127%2751F8512651FD072751F851262726FD0727F87C517C7CFF51515126FD06%275126272651FD0527512627265127272751512726515151F851267DFD05%FF7D5151F827277C51512727517C5127267C515126517C512727512751A6%2727277C7C27277C517DFF26512651262726512627F8272627F827265126%27F8272627F8272627F827F8512627F827262D7CFD05FF7C7C5127265151%7C5127277C5151F851517C2727517C5127F87C272751FD042752F851517C%7CFF51515127515151275151512751515127515151275151512751275127%5127512D512751515126A7FD05FFA77B7C5152517C5127517C7C5227527C%7C2727517C5127277C7C7C2727517C515127527C7C517DFF265127512651%275126512751265127512651275126512751265127512651275126512751%26517DFD05FF7C7C517C517C517C517C517C517C577C517C577C517C517C%517C517C517C517C517C517C517C7CFF5127515151275151512751515127%515151275151512751515127515151275151512751515126A7FD05FF7D51%7C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C%7C517C7C7C517DFF26512651265126512651265126512651265126512651%265126512651265126512651265126267CFD05FF7C7B517C517C517C517C%517C517C517C517C517C517C517C517C517C517C517C517C517C517B7CFF%512751515127515151275151512751515127515151275151512751515127%5151512751515126A7FD05FF7D517C7C7C517C7C7C517C7C7C517C7C7C51%7C7C7C517C7C7C517C7C7C517C7C7C517C7C7C51A7FF2751265127512651%275126512751265127512651275126512751265127512651275126512726%7CFD05FF7C7C517C517C517C517C517C517C517C517C517C517C517C517C%517C517C517C517C517C517C7CFF51515127515151275151512751515127%515151275151512751515127515151275151512751267DFD05FF7D517C51%7C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C%7C517C517DFF265126512651265126512651265126512651265126512651%26512651265126512651265126277CFD05FF7C7C517C517C517C517C517C%517C517C517C517C517C517C517C517C517C517C517C517C517C7CFF5151%512751515127515151275151512751515127515151275151512751515127%515151275126A7FD05FFA7517C517C7C7C517C7C7C517C7C7C517C7C7C51%7C7C7C517C7C7C517C7C7C517C7C7C517C517DFF26512751265127512651%275126512751265127512651275126512751265127512651275126517DFD%05FF7C7C517C517C517C517C517C517C517C517C517C517C517C517C517C%517C517C517C517C517C7CFF512751515127515151275151512751515127%5151512751515127515151275151512751515126A7FD05FF7D517C7C7C51%7C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C7C517C7C%7C517DFF2651265126512651265126512651265126512651265126512651%2651265126512651265126267CFD05FF7C7B517C517C517C517C517C517C%517C517C517C517C517C517C517C517C517C517C517C517B7CFF51265126%512651265126512651265126512651265126512651265126512651265126%51265126A7FD05FF7C517C517C517C517C517C517C517C517C517C517C51%7C517C517C517C517C517C517C517C517DFF7C7C7C7D7C7C7C7D7C7C7C7D%7C7C7C7D7C7C7C7D7C7C7C7D7C7C7C7D7C7C7C7D7C7C7C7D7C7CA7FD05FF%A7A77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA77DA7%7DA77DA77DA77DA77DFDFCFFFDFCFFFFCFA7CFA8CFA7CFA8CFA7CFA8CFA7%CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7CFA8CFA7FD07FFCFFFCF%FFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCFFFCF%FFCFFFCFFFFF7CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA7%7CA77CA77CA77CA77CA77CA77CA6A7FD05FFCFCFC9CFCECFC9CFCECFC9CF%CECFC9CFCECFC9CFCECFC9CFCECFC9CFCECFC9CFCECFC9CFCECFCAFFA7A7%A782A7A7A782A7A7A782A7A7A782A7A7A782A7A7A782A7A7A782A7A7A782%A7A7A782A7A6CFFD05FFFD27CFFF7CA77CA77CA77CA77CA77CA77CA77CA7%7CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA7A7FD05FFA8CFCECF%A7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CF%CECFA7CFCFFFFD25A7A6CFFD06FFFD26CFFF7CA77CA77CA77CA77CA77CA7%7CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA7A7FD05FF%FD04CFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCF%CFC9CFCFCFC9CFCFFFA782A7A7A782A7A7A782A7A7A782A7A7A782A7A7A7%82A7A7A782A7A7A782A7A7A782A7A7A77CCFFD05FFFD27CFFF7CA77CA77C%A77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77C%A77CA7A7FD05FFCFCFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7%CFCECFA7CFCECFA7CFCECFA7CFCECFA8FFFD25A782CFFD05FFFD26CFFFFF%7CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA7%7CA77CA77CA77CA7A7FD05FFCFCFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCF%C9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCFC9FD04CFFFA7A7A782A7A7A782A7%A7A782A7A7A782A7A7A782A7A7A782A7A7A782A7A7A782A7A7A782A7A6CF%FD05FFFD27CFFF7CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77C%A77CA77CA77CA77CA77CA77CA77CA7A7FD05FFA8CFCECFA7CFCECFA7CFCE%CFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCFFFFD%25A7A6CFFD06FFFD26CFFF7CA77CA77CA77CA77CA77CA77CA77CA77CA77C%A77CA77CA77CA7A67C7CA7A6A77C7CA6A77CA7A7FD05FFFD04CFCEFD07CF%CECFCFCFC9CFCFCFCEFD0BCFCECFCFCFC9CFCFFFA782A7A7A77C7C527CFD%04A7A6A7A7A7A6A7A7A7A6FD04A77C272751A75151277CA7A77CCFFD05FF%FD09CFA7CFCFCFA7CFA7CFA7CFA7CFCFCFA7FD04CFA7A1CFCFCFA7A7A7CF%CFCFFF7CA77CA77C51272751A7515151A7525151A77C51277C7C51277C20%8382275127A67CF8A77CA7A7FD05FFCFCFA7CF7C7D7CA7205127A7522727%52A72727517D7DF85227CFA727275152CF4B272752A7CFA8FFFD05A74B52%277C52277C7C7C27527C7C27527C7C51517C7C277CA7275227A77C277CA7%82CFFD05FFCFCFCFA75252A1A727CFFFCF527CFFCFCF27CFCFFF5252CFCF%CF517CCFCFFF5252FD05CFFFFF7CA77CA77C2727277C2751ADA75127ADA7%5227A7A77C26A7A7A7512727277C582727F8A7A6A7A7FD05FFCFCFCF7C27%2752A7277C7CCF52527CA7A727767DA77C27A77DA127CFCFCFA727A7CFCE%FD04CFFFFD05A7275127A72751A7A75127A7A752277CA77C277CA7A7A77C%5227A7A7A72752A7A7A6CFFD05FFCFCFCF525251A7A727527CA77C277C7C%CF277C52CF7C2752A77C51CFCFCFCA27FD07CFFF7CA77CA77C525152A77C%262727A72727277C2727277C5127277C7C272783A752F8517CA77CA7A7FD%05FFA8CFA75127277DA727CFCFCF277DCFCFA727CFCFCF5251FFCFA8F8A7%CFCFCF2752CFCFCFA7CFCFFFFD07A7A6A7A7A77CA7A7A77CA7A7A77C7DA7%A77C7DA7A77CA7A7A77CFD05A7A6CFFD06FFCFCF7C7D76FFA14BCFCFCF52%7CFFCFCF27CFCFFF5252CFCFCF7D277C52A7A727517C52CFCFCFFF7CA77C%A77CA782A77CA782A77CA782A77CA782A782A782A782A7A6A77CA77CA77C%A77CA77CA7A7FD05FFCFCFCFA7A7A8CFCF7DCFCFCFA7CFCFCFA7A7C9CFCF%A7A7CFC9CFCFA7527CA7CFA77D52A1CECFCFFFA782A7A7A782A7A7A782A7%A7A782A7A7A782A7A7A782A7A7A782A7A7A782A7A7A782A7A7A77CCFFD05%FFFD22CFFFFD04CFFF7CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77C%A77CA77CA77CA77CA77CA77CA77CA77CA7A7FD05FFCFCFA7CFCECFA7CFCE%CFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA8%FFFD25A782CFFD05FFFD26CFFFFF7CA77CA77CA77CA77CA77CA77CA77CA7%7CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA7A7FD05FFCFCFC9CF%CFCFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCF%C9FD04CFFFA7A7A782A7A7A782A7A7A782A7A7A782A7A7A782A7A7A782A7%A7A782A7A7A782A7A7A782A7A6CFFD05FFFD27CFFF7CA77CA77CA77CA77C%A77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA7A7%FD05FFA8CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCE%CFA7CFCECFA7CFCECFA7CFCFFFFD25A7A6CFFD06FFFD26CFFF7CA77CA77C%A77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77C%A77CA7A7FD05FFFD04CFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCF%C9CFCFCFC9CFCFCFC9CFCFCFC9CFCFFFA782A7A7A782A7A7A782A7A7A782%A7A7A782A7A7A782A7A7A782A7A7A782A7A7A782A7A7A77CCFFD05FFFD27%CFFF7CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA7%7CA77CA77CA77CA77CA7A7FD05FFCFCFA7CFCECFA7CFCECFA7CFCECFA7CF%CECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA8FFFD25A782CFFD%05FFFD26CFFFFF7CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77C%A77CA77CA77CA77CA77CA77CA77CA7A7FD05FFCFCFC9CFCFCFC9CFCFCFC9%CFCFCFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCFC9FD04CFFFA7A7%A782A7A7A782A7A7A782A7A7A782A7A7A782A7A7A782A7A7A782A7A7A782%A7A7A782A7A6CFFD05FFFD27CFFF7CA77CA77CA77CA77CA77CA77CA77CA7%7CA77CA77CA77CA77CA77CA77CA77CA77CA77CA77CA7A7FD05FFA8CFCECF%A7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CFCECFA7CF%CECFA7CFCFFFA7A7A7A6A7A7A7A6A7A7A7A6A7A7A7A6A7A7A7A6A7A7A7A6%A7A7A7A6A7A7A7A6A7A7A7A6A7A6CFFD06FFFD26CFFF7CA782A77CA782A7%7CA782A77CA782A77CA782A77CA782A77CA782A77CA782A77CA782A77CA7%A7FD05FFFD04CFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCFCFC9CFCF%CFC9CFCFCFC9CFCFCFC9CFCFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFDFCFFFDFCFFFD82FF%7D527D527D527D527D527D527D527D527D527D527D527D527D527D527D52%7D527D527D527D52A1FD06FFA1A176A176A176A176A176A176A176A176A1%76A176A176A176A176A176A176A176A176A176A1A12720F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F827F827F8F827%FD06FF6F4469444444694444446944444469444444694444446944444469%44444469444444694444446F52FD24272052FD06FFFD046F4B6F6F6F4B6F%6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6FFD%26274BFD06FF76446F456F446F456F446F456F446F456F446F456F446F45%6F446F456F446F456F446F456F447052FD252752FD06FF706F456F4B6F45%6F4B6F456F4B6F456F4B6F456F4B6F456F4B6F456F4B6F456F4B6F456F4B%6F6FFD042720272727202727272027272720272727202727272027272720%2727272027272720274BFD06FF76446F446F446F446F446F446F446F446F%446F446F446F446F446F446F446F446F446F446F446F52FD252752FD06FF%766F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F%4B6F6F6F4BFD046FFD262752FD06FF76446F446F456F446F456F446F456F%446F456F446F456F446F456F446F456F446F456F446F446F52FD24272052%FD06FF6F6F4B6F456F4B6F456F4B6F456F4B6F456F4B6F456F4B6F456F4B%6F456F4B6F456F4B6F456F6F272720272727202727272027272720272727%2027272720272727202727272027272720FD0427FD06FF76446F446F446F%446F446F446F446F446F446F446F446F446F446F446F446F446F446F446F%446F52FD24272052FD06FFFD046F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F%4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6FFD26274BFD06FF76446F45%6F446F456F446F456F446F456F446F456F446F456F446F456F446F456F44%6F456F447052FD252752FD06FF706F456F4B6F456F4B6F456F4B6F456F4B%6F456F4B6F456F4B6F456F4B6F456F4B6F456F4B6F6FFD04272027272720%27272720272727202727272027272720272727202727272027272720274B%FD06FF76446F446F446F446F446F446F446F446F446F446F446F446F446F%446F446F446F446F446F446F52FD222720272752FD06FF766F4B6F4B6F4B%6F446F446F4B6F4B6F4B6F4B6F456F446F456F456F6F6F456F456F44FD04%6FFD0827202727272027274B20272727F8272027527D272727522027F827%527D272752FD06FF76446F4B9B767644A1A8A1446FA1CA766F76CAA87644%A1A8A86F6FA1CAA16F4BA8A8A1446F446F522727527D525227277DCA2727%7DCA7D277DFFA876F87DA8A87D7D52A8A87D2052A8A87D7D2052FD06FF6F%6F4B9AA1A876A1A86FA8A1A1A16FCA76766FA1A86F766FA1CA457645FF9B%6F706FCA76446F6F2727277D7DA8522052FF7D2752A827272027F87D7D27%A852F827F827F852A827A87DF827202727FD06FF76446FA1A8A8A1A1A120%9AA1CA7644A1A14476A8A1446F76CA70454BA1A876446F7DA84B6F446F52%2752A8A8A87627A852A820FFA8A87D2727A8A85252A8FD05277DA87D27A8%FD04272052FD06FF6F6F6FA1A1CA6F76A8A1CAA876FFA1FF766FA1FFA16F%6FA1A8A14476A1FF766F76CAA876446F6F272727A87DA827A87D7DA852A8%7D20FF522752A87D767D2727272027527D7D52A827F82727274BFD06FF76%446FA8A8A876446F76CA76444BA1A87644444BFF4B444476A86F444476CA%444444CAA1444470522752A8A8A8527D7DA1FF52A85220A87D202052FF27%FF52FD0627FF4BA87D2720272752FD06FF706F44A176A1446F76CAA16F6F%A1A8A145A17DCAA86FA1A1A8A16FA1A1FF7676A1A1A89A446F6F2727277D%527DF827F8527DF852A87DA827A87DA8522752A87DA8527D7DA87D2727A8%7DA87D274BFD06FF76446F6F766F4B44A1766F446F7676446F76A1766F44%767D9A446F76A176454BA1A176446F446F5227272752FD0527522727527D%27274B7D4BFD04277D524B277D52FD04275252522752FD06FF766F4B6F45%6F4B6F446F456F4B6F446F6F6F446F4B6F446F446F456F446F4B6F446F44%FD046FFD042720FD092720272727202720272727F8272727F8FD05272027%202752FD06FF76446F446F456F446F456F446F456F446F456F446F456F44%6F456F446F456F446F456F446F446F52FD24272052FD06FF6F6F4B6F456F%4B6F456F4B6F456F4B6F456F4B6F456F4B6F456F4B6F456F4B6F456F4B6F%456F6F272720272727202727272027272720272727202727272027272720%2727272027272720FD0427FD06FF76446F446F446F446F446F446F446F44%6F446F446F446F446F446F446F446F446F446F446F446F52FD24272052FD%06FFFD046F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B%6F6F6F4B6F6F6F4B6F6FFD26274BFD06FF76446F456F446F456F446F456F%446F456F446F456F446F456F446F456F446F456F446F456F447052FD2527%52FD06FF706F456F4B6F456F4B6F456F4B6F456F4B6F456F4B6F456F4B6F%456F4B6F456F4B6F456F4B6F6FFD04272027272720272727202727272027%27272027272720272727202727272027272720274BFD06FF76446F446F44%6F446F446F446F446F446F446F446F446F446F446F446F446F446F446F44%6F446F52FD252752FD06FF766F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B%6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4BFD046FFD262752FD06FF76446F44%6F456F446F456F446F456F446F456F446F456F446F456F446F456F446F45%6F446F446F52FD24272052FD06FF6F6F4B6F456F4B6F456F4B6F456F4B6F%456F4B6F456F4B6F456F4B6F456F4B6F456F4B6F456F6F27272027272720%27272720272727202727272027272720272727202727272027272720FD04%27FD06FF76446F446F446F446F446F446F446F446F446F446F446F446F44%6F446F446F446F446F446F446F52FD24272052FD06FFFD046F4B6F6F6F4B%6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F6F4B6F6F%FD26274BFD06FF76446F456F446F456F446F456F446F456F446F456F446F%456F446F456F446F456F446F456F447052FD252752FD06FF706F456F4B6F%456F4B6F456F4B6F456F4B6F456F4B6F456F4B6F456F4B6F456F4B6F456F%4B6F6FFD0427202727272027272720272727202727272027272720272727%202727272027272720274BFD06FF76446F446F446F446F446F446F446F44%6F446F446F446F446F446F446F446F446F446F446F446F%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat 4)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7884.8833 8586.9551 m-7793.0479 8586.9551 L-7793.0479 8582.6758 L-7884.8833 8582.6758 L-7884.8833 8586.9551 Ln0 O0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa-7884.6631 8584.2754 m-7885 8584.3418 -7884.4814 8584.5313 -7884.8833 8584.3887 C-7884.8379 8584.2705 -7884.7725 8584.1816 -7884.6631 8584.2754 Cf-7794.1675 8584.4414 m-7795.2524 8585.2041 -7796.6816 8584.4336 -7797.8701 8584.9199 C-7798.0098 8584.9521 -7797.8345 8584.502 -7798.1484 8584.6025 C-7799.3008 8585.1953 -7801.1162 8584.8418 -7802.5195 8584.3848 C-7802.4346 8584.2666 L-7802.7017 8584.1816 -7803.0283 8584.5723 -7803.3115 8584.5176 C-7803.3135 8584.4395 -7803.2207 8584.4063 -7803.2861 8584.2979 C-7803.3574 8584.5352 -7803.7983 8584.4082 -7803.9185 8584.584 C-7804.0303 8584.4922 -7804.0195 8584.3047 -7804.1641 8584.2002 C-7804.3262 8584.4697 L-7804.7769 8585.1094 -7805.4209 8584.4258 -7806.0361 8584.7559 C-7806.0063 8584.6934 -7805.9453 8584.6445 -7805.9941 8584.584 C-7806.9814 8584.9727 -7808.2168 8584.8994 -7809.3208 8585.043 C-7809.2769 8584.9482 -7809.2363 8584.7754 -7809.3008 8584.668 C-7809.3555 8584.9512 -7809.6963 8585.0225 -7809.9922 8585.0781 C-7810.1255 8584.7871 -7810.4995 8585.3438 -7810.8467 8585.1826 C-7810.8169 8585.1191 L-7811.0732 8585.4238 -7811.1973 8584.9434 -7811.4053 8585.3086 C-7811.5684 8585.0801 L-7811.6807 8585.4902 -7811.9395 8584.8672 -7812.1514 8585.0762 C-7812.1445 8585.1602 L-7812.3442 8585.2598 -7812.4482 8585.0537 -7812.6338 8585.123 C-7812.6514 8585.0762 L-7813.0854 8585.1826 -7813.3379 8584.9551 -7813.3271 8585.2754 C-7813.4795 8585.0186 -7812.9063 8585.1582 -7813.1455 8584.7842 C-7814.5732 8585.1152 -7816.0459 8585.0498 -7817.4834 8585.0566 C-7817.6465 8584.9277 -7817.7505 8584.8887 -7817.7871 8584.7666 C-7817.9307 8584.832 -7818.3281 8584.8262 -7818.4585 8584.9902 C-7818.4102 8584.9834 -7818.5513 8584.8262 -7818.6274 8584.8105 C-7818.8887 8584.6895 -7818.9131 8585.1621 -7819.2002 8585.0186 C-7819.0859 8584.9336 -7819.0469 8584.8301 -7819.0854 8584.7109 C-7819.3301 8584.9609 -7819.6577 8584.9209 -7819.9473 8585.002 C-7819.9023 8584.9482 -7819.8325 8584.916 -7819.8433 8584.8154 C-7820.1602 8585.0986 -7820.4209 8584.7559 -7820.6982 8584.9346 C-7820.5947 8584.75 L-7821.0415 8584.5254 -7820.7266 8585.1367 -7821.1128 8585.0039 C-7821.02 8584.9453 -7821.0527 8584.873 -7821.0361 8584.7979 C-7821.3965 8585.1338 -7821.9795 8585.0225 -7822.3389 8585.1367 C-7822.3174 8585.1113 -7822.3232 8585.0605 Y-7822.7148 8585.1025 -7823.1245 8584.998 -7823.5552 8585.1445 C-7823.7119 8585.0625 -7823.5039 8584.6934 -7823.9185 8584.7617 C-7823.9033 8585.1328 -7824.6221 8584.9141 -7824.3779 8585.334 C-7824.7319 8585.2734 -7825.2925 8585.1338 -7825.5283 8585.2598 C-7825.3691 8585.1191 -7825.7007 8584.8066 -7825.4063 8584.7754 C-7825.6289 8584.5498 L-7825.5957 8584.3984 -7825.3999 8584.6016 -7825.4707 8584.4102 C-7825.6182 8584.4258 -7826.0479 8584.5723 -7826.1797 8584.5117 C-7826.4531 8584.7393 -7826.7041 8585.1641 -7827.1465 8585.2109 C-7826.9385 8585.0664 -7827.2646 8584.8018 -7827.1235 8584.7383 C-7827.7407 8585.4482 L-7827.8877 8585.4658 -7827.7725 8585.1563 -7827.9854 8585.2529 C-7827.9746 8585.3506 -7828.0674 8585.4121 -7828.1318 8585.4922 C-7828.1875 8585.4482 -7828.7441 8585.584 -7828.8081 8585.2178 C-7828.8735 8585.0762 -7828.5684 8585.1426 -7828.7314 8585.0117 C-7829.0029 8585.0146 -7829.0151 8585.1406 -7829.2871 8585.1465 C-7829.2925 8585.0977 L-7829.4717 8585.043 -7829.8213 8585.2529 -7829.6265 8585.4551 C-7829.5015 8585.4658 -7829.6738 8585.2354 -7829.4888 8585.3418 C-7829.6152 8585.5537 -7829.9312 8585.6133 -7830.2031 8585.6162 C-7830.1104 8585.5586 -7830.1216 8585.4609 -7830.0845 8585.3574 C-7830.4497 8585.6445 -7830.8369 8585.7354 -7831.2451 8585.8555 C-7831.2515 8586.0293 -7831.0928 8585.5391 -7831.0327 8585.6309 C-7831.5557 8585.3896 -7832.1128 8585.9727 -7832.5479 8585.6201 C-7832.4766 8585.5898 -7832.5098 8585.8672 -7832.5146 8585.8184 C-7832.7666 8585.7969 -7832.7549 8585.5449 -7832.9189 8585.6377 C-7832.9355 8585.4902 -7833.1255 8585.6855 -7833.2944 8585.7305 C-7833.3818 8585.8369 -7833.3384 8585.6582 -7833.1914 8585.6426 C-7833.4268 8585.7666 -7834.3691 8585.9941 -7834.9131 8585.7793 C-7834.9023 8585.877 -7835.2471 8586.1377 -7835.3721 8586.127 C-7835.3232 8585.8984 L-7835.4375 8585.7617 -7835.7422 8585.918 -7835.7632 8585.7227 C-7836.0303 8586 -7834.7344 8585.4863 -7835.0957 8585.7002 C-7835.1895 8585.5098 -7835.5991 8586.0645 -7835.5215 8585.7529 C-7835.7725 8585.7617 -7836.0161 8586.0186 -7836.2559 8585.8047 C-7836.1865 8585.8418 -7836.0522 8585.4873 -7836.2549 8585.5039 C-7836.6123 8585.5449 -7836.3564 8585.6133 -7836.6465 8585.6895 C-7836.8281 8585.7832 L-7836.8398 8586.0059 -7837.1475 8585.7529 -7837.0146 8586.002 C-7837.0586 8585.8184 -7837.5337 8586.1152 -7837.4971 8585.7461 C-7837.4473 8585.4551 L-7837.6016 8585.4766 -7837.7002 8585.7617 -7837.8213 8585.8896 C-7837.8418 8585.8633 -7837.8823 8585.8047 -7837.8745 8585.7578 C-7837.8994 8586.2031 -7838.2432 8585.7207 -7838.4268 8586.0645 C-7838.7505 8585.9102 -7839.2495 8586.0498 -7839.4023 8585.7734 C-7839.6514 8585.9082 -7839.8784 8586.0674 -7840.1621 8585.9727 C-7840.1055 8585.9307 -7840.0283 8585.918 -7840.0122 8585.8223 C-7840.1904 8585.6914 -7840.2344 8585.8086 -7840.3975 8585.8809 C-7840.3608 8585.8145 -7840.7539 8585.6201 -7840.9521 8585.4629 C-7841.1992 8585.5957 -7841.1143 8585.8359 -7841.1392 8585.9824 C-7841.3652 8585.543 -7841.8379 8586.2656 -7842.1211 8585.8672 C-7842.0352 8585.8066 -7841.7598 8585.6514 -7841.9658 8585.541 C-7842.1919 8585.1025 -7842.4219 8585.8643 -7842.7861 8585.6543 C-7842.6968 8586.0186 L-7842.8594 8585.793 -7843.2334 8586.2305 -7843.1963 8585.8594 C-7843.3184 8585.9902 -7843.6265 8585.7383 -7843.5859 8586.0938 C-7844.1846 8585.793 -7845.0425 8586.2754 -7845.4102 8585.6377 C-7845.4961 8585.6973 -7845.7104 8585.6367 -7845.6665 8585.8193 C-7845.5239 8586.0176 -7845.4673 8585.6777 -7845.4141 8585.8125 C-7845.4912 8585.8232 -7845.5078 8585.9209 -7845.5161 8585.9697 C-7845.7021 8585.8887 -7845.8486 8585.8633 -7845.6729 8585.5674 C-7846.0869 8585.3477 -7846.1001 8586.1719 -7846.6274 8586.0322 C-7846.6035 8585.8857 -7846.6436 8585.8301 -7846.7979 8585.8535 C-7847.0903 8586.1055 L-7847.4312 8586.0469 -7847.2842 8585.7705 -7847.2925 8585.5215 C-7847.4746 8585.5645 -7847.6973 8585.5527 -7847.7803 8585.7383 C-7848.0015 8585.4258 L-7847.8398 8585.6514 -7848.1514 8585.5762 -7848.2368 8585.6367 C-7848.1514 8585.5762 L-7848.1846 8585.4697 -7848.3955 8585.5352 -7848.5024 8585.5664 C-7848.4766 8585.7207 -7848.2617 8585.7832 -7848.1445 8585.8281 C-7848.2373 8585.9375 -7848.3823 8585.9121 -7848.5059 8586.041 C-7848.4648 8585.7969 -7848.8027 8585.8672 -7848.9473 8585.8418 C-7849.1133 8585.7891 -7849.1348 8586.0605 -7849.1831 8586.0527 C-7849.1875 8585.9258 -7849.4541 8586.0313 -7849.3247 8585.8535 C-7849.2681 8585.8125 -7849.1953 8585.9766 -7849.1016 8585.8643 C-7849.2109 8585.7705 -7849.1982 8585.5498 -7849.4258 8585.7109 C-7849.5967 8585.832 -7849.3818 8586.1934 -7849.7061 8586.0391 C-7849.6211 8585.9785 -7849.6055 8585.8809 -7849.5391 8585.793 C-7849.8433 8585.666 L-7849.8564 8585.8887 L-7849.8975 8585.832 -7849.8691 8585.8125 -7849.8877 8585.7832 C-7849.9785 8586.0176 -7850.3521 8585.8555 -7850.4209 8586.1191 C-7850.5742 8586.1426 -7850.7441 8585.9648 -7850.8906 8585.9395 C-7850.8623 8585.9199 L-7851.0415 8585.7891 -7851.2793 8585.875 -7851.4297 8586.0254 C-7851.4219 8585.9766 L-7851.5195 8585.959 -7851.7505 8585.9941 -7851.8735 8586.125 C-7852.1201 8585.957 -7851.9561 8585.2842 -7852.2295 8585.5645 C-7852.48 8585.5723 -7852.6221 8585.9727 -7852.5215 8586.1152 C-7852.9717 8585.9648 -7853.4834 8586.3281 -7853.9009 8585.9824 C-7853.9658 8586.0723 -7853.9248 8586.1289 -7854.0586 8586.1816 C-7854.7197 8586.0938 -7855.4551 8586.4453 -7855.9814 8586.0078 C-7855.79 8585.9141 -7855.9688 8585.7842 -7855.9727 8585.6582 C-7856.1309 8585.8574 -7856.1631 8585.4512 -7856.2197 8585.793 C-7856.2041 8585.9941 -7856.2197 8586.0918 -7856.0337 8586.1729 C-7856.4282 8586.2813 -7857.0283 8586.2813 -7857.2471 8586.0938 C-7857.1377 8586.1865 -7857.2227 8586.248 -7857.3086 8586.3086 C-7857.2803 8585.9873 -7857.5713 8585.9395 -7857.7915 8586.0527 C-7857.8223 8586.248 L-7857.9658 8586.0469 L-7858.0503 8586.1094 -7858.0591 8586.457 -7858.2773 8586.2695 C-7858.2891 8586.1934 -7858.3018 8586.1162 -7858.3418 8586.0605 C-7858.5693 8586.2207 -7858.8906 8586.4922 -7859.1377 8586.3262 C-7859.3398 8586.041 L-7859.4453 8586.0723 -7859.6235 8586.2441 -7859.4375 8586.3262 C-7859.8594 8586.1543 -7860.1309 8586.1328 -7860.2646 8585.8857 C-7860.9912 8586.4873 -7862.0459 8586.5117 -7862.8906 8586.4688 C-7862.8652 8586.3223 L-7863.0923 8586.1855 -7862.9834 8586.5781 -7863.1416 8586.4766 C-7863.0684 8586.3369 -7863.3145 8586.1729 -7863.1362 8586.002 C-7863.4609 8585.8477 -7863.5547 8586.2559 -7863.7656 8586.3223 C-7863.7979 8586.5146 -7863.5957 8586.1992 -7863.6367 8586.4434 C-7863.6729 8586.5117 -7864.0859 8586.293 -7864.1362 8586.584 C-7864.2178 8586.4697 -7864.1543 8586.2559 -7864.1104 8586.1377 C-7864.3086 8586.2793 L-7864.5513 8585.9395 -7863.7559 8585.6719 -7864.0107 8585.2529 C-7864.1934 8585.2979 L-7864.3682 8584.9941 -7863.71 8584.9551 -7864.1689 8584.8506 C-7864.3682 8584.9941 -7864.5381 8585.416 -7864.3608 8585.5449 C-7864.7754 8585.625 -7864.5527 8586.2383 -7864.9985 8586.2139 C-7865.1201 8586.043 -7864.6416 8586.1729 -7864.7275 8585.9336 C-7864.9375 8585.6992 -7865.1484 8586.0645 -7865.3354 8585.9824 C-7865.1279 8586.0918 -7865.3032 8586.3857 -7865.4375 8586.4395 C-7865.6641 8586.3018 -7865.29 8586.1641 -7865.6113 8586.1338 C-7865.6641 8586.3018 -7865.9595 8586.4277 -7865.7041 8586.5449 C-7865.8203 8586.9258 -7866.0381 8586.4395 -7866.2129 8586.7344 C-7866.3174 8586.4658 -7865.8823 8586.1152 -7866.2354 8585.9814 C-7866.1792 8586.2393 -7866.6704 8586.332 -7866.4839 8586.7139 C-7866.6221 8586.6406 -7866.6367 8586.4375 -7866.5361 8586.2793 C-7866.7334 8586.1201 -7867.0151 8586.75 -7867.0801 8586.2383 C-7867.1479 8586.502 L-7867.21 8586.416 -7867.2983 8586.3506 -7867.3994 8586.209 C-7867.5732 8586.2041 -7867.96 8586.5664 -7867.9443 8586.168 C-7868 8586.209 -7868.3975 8586.1914 -7868.2441 8586.4658 C-7867.9971 8586.6338 -7867.96 8586.2656 -7867.8223 8586.6377 C-7867.9971 8586.334 -7868.1787 8586.6777 -7868.3213 8586.7793 C-7868.3447 8586.625 L-7868.4297 8586.6855 -7868.6255 8586.6514 -7868.6787 8586.8184 C-7868.6133 8586.7305 -7868.6475 8586.625 -7868.7148 8586.5879 C-7868.8042 8586.8223 L-7869.1494 8586.9395 -7868.8857 8586.4102 -7869.2217 8586.4785 C-7868.9663 8586.2969 L-7869.0225 8586.3359 -7869.1367 8586.1162 -7869.2979 8586.1895 C-7869.3604 8586.4033 -7869.4775 8586.6602 -7869.5313 8586.8262 C-7869.7207 8586.9199 -7869.6162 8586.585 -7869.8027 8586.8047 C-7869.5586 8586.5469 L-7869.5215 8586.4766 -7869.7231 8586.1934 -7869.9761 8586.1992 C-7870.1377 8586.2734 -7870.3887 8586.582 -7870.1338 8586.6992 C-7870.2607 8586.7031 -7870.4385 8586.5723 -7870.3379 8586.416 C-7870.6255 8586.4902 -7870.2998 8586.6465 -7870.5479 8586.7793 C-7870.6494 8586.6367 -7870.9658 8586.4336 -7871.1563 8586.2266 C-7870.8975 8585.8682 L-7871.0693 8585.8643 L-7870.8467 8585.5781 -7871.1826 8585.6465 -7871.0566 8585.3438 C-7871.1743 8585.2969 -7871.3169 8585.3994 -7871.4307 8585.4785 C-7871.0864 8585.9629 -7871.8159 8586.1406 -7871.7158 8586.582 C-7872.1875 8586.7031 -7872.0107 8585.5078 -7872.5024 8586.1992 C-7872.4219 8586.3145 -7872.6533 8586.6504 -7872.3564 8586.5225 C-7872.6494 8586.4746 -7872.5557 8586.9658 -7872.9014 8586.7832 C-7872.6455 8586.6016 -7873.1763 8586.3359 -7872.8066 8586.0723 C-7872.8311 8586.2178 -7872.6001 8586.1826 -7872.5435 8586.1426 C-7872.6641 8585.9727 -7872.5186 8585.6973 -7872.8184 8585.6973 C-7873.0015 8585.7393 -7873.2524 8585.748 -7873.2158 8585.9785 C-7873.2085 8586.2314 -7872.9365 8585.9512 -7873.0537 8586.207 C-7873.4185 8586.2949 -7873.4795 8585.9102 -7873.6304 8586.3594 C-7873.3999 8586.3232 -7873.3423 8586.584 -7873.3467 8586.7578 C-7873.6143 8586.8633 L-7873.5625 8586.6953 L-7873.9922 8586.5742 -7873.6895 8587 -7874.1055 8586.9551 C-7874.3008 8586.623 L-7874.2017 8586.3369 -7873.6953 8586.75 -7873.7695 8586.2842 C-7874.04 8586.2656 -7874.1299 8586.502 -7874.3848 8586.3818 C-7874.3281 8586.3418 -7874.2505 8586.3301 -7874.1943 8586.2891 C-7874.2915 8586.2734 -7874.3877 8585.6563 -7874.7734 8586.0176 C-7874.9727 8586.1582 -7874.8262 8586.1826 -7874.8311 8586.3574 C-7875.2656 8586.4102 -7875.3955 8586.5879 -7875.6753 8586.6152 C-7875.6177 8586.2754 -7876.1699 8586.582 -7875.8608 8586.2344 C-7875.7188 8586.4336 -7875.0903 8586.4141 -7874.9365 8586.0898 C-7875.0947 8585.6865 -7874.5952 8586.1465 -7874.5024 8585.7383 C-7874.8506 8585.7285 -7874.8335 8585.332 -7874.8896 8585.0723 C-7874.9863 8585.0537 -7875.0801 8585.1641 -7875.1377 8585.2041 C-7875.1787 8585.4482 -7875.0522 8585.4453 -7875.0449 8585.6973 C-7875.4336 8585.6309 -7875.8081 8585.7666 -7876.0225 8586.0059 C-7876.1523 8585.8848 -7876.1113 8585.6406 -7875.9575 8585.6162 C-7876.4199 8585.6895 -7876.9141 8585.6563 -7877.3535 8585.582 C-7877.0693 8585.9814 -7877.8433 8585.6758 -7877.6494 8586.0078 C-7877.4141 8586.0977 -7877.2119 8586.3818 -7877.3418 8586.5605 C-7877.4888 8586.5352 -7877.3369 8586.3857 -7877.3984 8586.3008 C-7877.5859 8586.5186 -7877.6895 8585.9512 -7877.8735 8586.2949 C-7877.4512 8586.166 -7877.7915 8585.8086 -7877.7139 8585.4961 C-7878.0186 8585.6719 -7877.7007 8585.2734 -7878.0024 8585.2734 C-7878.3057 8585.4473 -7878.6787 8585.584 -7879.0161 8585.6514 C-7879.4399 8585.3555 -7880.0898 8585.6465 -7880.4683 8585.6582 C-7880.6665 8585.5 -7880.5322 8585.1465 -7880.7471 8585.085 C-7880.9995 8585.0918 -7880.5601 8585.4658 -7880.9336 8585.3047 C-7880.8975 8585.2344 L-7881.0107 8585.3154 -7881.5825 8584.9941 -7881.6929 8585.502 C-7881.5776 8585.1191 L-7881.6475 8585.084 -7881.7119 8585.1719 -7881.7695 8585.2129 C-7881.7725 8585.0879 -7881.8535 8584.9746 -7881.7402 8584.8926 C-7881.9707 8584.6289 -7882.2241 8584.9346 -7882.4746 8584.9453 C-7882.3135 8585.1719 L-7882.7422 8585.3496 -7883.0293 8585.125 -7883.4443 8585.2041 C-7883.4316 8584.9824 L-7883.6787 8585.1152 L-7883.6182 8584.8994 -7883.8447 8584.7617 -7883.9751 8584.9414 C-7883.3335 8584.3984 L-7883.1553 8584.5293 -7883.5283 8584.666 -7883.4165 8584.8848 C-7883.3213 8585.0762 -7882.9375 8585.0146 -7882.8755 8584.8018 C-7883.0225 8584.7773 -7883.0293 8584.8262 -7883.1436 8584.9063 C-7883.1919 8584.5977 -7882.9688 8584.6094 -7882.8584 8584.4033 C-7882.9355 8584.416 -7883.0449 8584.3223 -7883.0615 8584.4199 C-7882.9102 8584.2695 -7882.7578 8584.2461 -7882.5059 8584.2383 C-7882.6763 8584.3594 -7882.4131 8584.4297 -7882.4775 8584.5176 C-7882.4575 8584.2461 -7882.2168 8584.1621 -7881.9053 8584.2383 C-7881.6831 8584.5527 -7881.3208 8584.0361 -7880.96 8584.123 C-7881.1064 8584.3984 -7881.2935 8584.6191 -7881.5127 8584.7305 C-7881.2861 8584.8682 -7881.2607 8584.7227 -7881.0337 8584.8613 C-7880.9238 8584.6563 -7880.8457 8584.3418 -7880.5503 8584.2168 C-7880.5342 8584.4199 L-7880.2666 8584.3154 -7880.2666 8584.0146 -7879.9258 8584.0723 C-7879.3418 8584.1719 -7878.7407 8584.1719 -7878.2949 8584.1973 C-7878.2783 8584.3994 L-7878.0303 8583.9658 -7877.4521 8584.2393 -7877.1182 8584.0469 C-7876.5503 8584.2422 -7875.8848 8583.8535 -7875.5938 8584.2031 C-7874.5913 8584.0469 -7873.7148 8583.8945 -7872.6768 8583.9688 C-7872.8516 8584.2637 L-7872.6655 8584.0469 -7872.7305 8584.4336 -7872.5479 8584.3896 C-7872.7578 8584.1543 -7872.2949 8584.084 -7872.1665 8583.9033 C-7871.7041 8584.1328 -7871.1104 8583.8818 -7870.7007 8583.6758 C-7870.6846 8583.8789 L-7870.2705 8583.498 -7869.7759 8583.832 -7869.2598 8583.8945 C-7869.2007 8583.9785 -7869.1074 8584.1689 -7868.9536 8584.1465 C-7868.6738 8583.8184 -7868.5273 8583.8418 -7868.1167 8583.6367 C-7867.8169 8583.6367 -7867.3301 8583.7178 -7867.0254 8583.8457 C-7865.8975 8583.3848 -7864.7456 8583.6797 -7863.5732 8583.4023 C-7863.4888 8583.6406 L-7862.3521 8583.1309 -7860.9541 8583.5938 -7859.9839 8583.332 C-7860.0776 8583.7393 L-7859.7734 8583.8643 -7859.3843 8583.6328 -7859.4619 8583.3438 C-7859.1567 8583.4688 -7858.7007 8583.1465 -7858.5068 8583.4814 C-7858.1953 8583.5566 -7858.1255 8583.293 -7857.8662 8583.2383 C-7857.2422 8583.3926 -7857.0107 8583.3574 -7856.4224 8583.2813 C-7856.5684 8583.2559 L-7856.6328 8583.3457 -7856.6387 8583.5186 -7856.4922 8583.5449 C-7856.2725 8583.4307 -7855.6846 8583.6543 -7855.9033 8583.168 C-7855.2754 8583.4482 -7854.4385 8582.9395 -7853.8271 8583.3184 C-7853.8789 8583.1855 -7853.7246 8583.1602 -7853.6602 8583.0703 C-7853.1089 8583.0645 -7852.5293 8583.3359 -7852.0898 8583.1094 C-7852.0024 8583.1758 -7852.2295 8583.3359 -7852.0049 8583.3496 C-7851.8721 8583.2979 -7852.0024 8583.1758 -7851.8384 8583.1016 C-7850.9453 8582.8535 -7850.0303 8583.3574 -7849.2188 8583.293 C-7847.7754 8583.0361 -7846.2695 8583.166 -7844.8867 8583.123 C-7844.9023 8583.2207 L-7844.4395 8582.8477 -7843.8159 8583.6025 -7843.4463 8583.041 C-7843.3369 8583.1338 -7843.0283 8583.085 -7843.1094 8583.2734 C-7842.7407 8583.0098 -7842.0771 8583.5215 -7841.5439 8583.1865 C-7841.5928 8583.1777 -7841.6211 8583.1973 -7841.6777 8583.2393 C-7841.1392 8583.4551 -7840.6641 8583.1602 -7840.0957 8583.3555 C-7840.1533 8583.3975 -7840.2583 8583.4277 -7840.2754 8583.5254 C-7840.0557 8583.7129 -7839.7549 8583.1133 -7839.6348 8583.584 C-7839.5088 8583.5801 -7839.5449 8583.3477 -7839.6221 8583.3613 C-7838.3779 8583.5449 -7837.0498 8583.2441 -7835.7549 8583.1367 C-7834.8271 8583.418 -7835.6982 8583.9297 -7834.9663 8583.5781 C-7834.9063 8583.6689 -7834.9229 8583.3984 -7834.9131 8583.4961 C-7834.6299 8583.3643 -7834.4717 8584.0215 -7834.2754 8583.7754 C-7834.3564 8583.4863 -7834.1445 8583.6133 -7834.1387 8583.4375 C-7833.5713 8583.625 -7833.4575 8583.8857 -7833.0098 8583.666 C-7833.0435 8583.8184 L-7832.5186 8583.3887 -7831.9102 8583.6191 -7831.4673 8583.123 C-7828.5728 8583.0322 -7825.7983 8582.7578 -7822.9761 8582.7002 C-7820.1865 8582.7949 -7817.4551 8582.5723 -7814.6221 8582.8359 C-7813.9585 8583.2354 -7813.9087 8583.2246 -7813.1797 8583.0625 C-7813.2095 8583.127 -7813.2549 8583.1426 -7813.2061 8583.2031 C-7813.1699 8582.875 -7812.6929 8583.1719 -7812.6235 8582.8594 C-7811.5762 8582.9199 -7810.6113 8582.8301 -7809.5337 8582.8281 C-7809.7041 8582.8633 -7809.7896 8583.1309 -7809.5869 8583.1094 C-7809.3755 8582.8994 L-7809.3408 8582.9922 L-7809.2021 8582.9434 -7809.0513 8582.7813 -7809.1943 8582.6758 C-7806.4873 8582.3926 -7803.8242 8583.0498 -7801.1729 8582.9697 C-7800.5435 8583.1064 -7799.6475 8582.9814 -7798.9629 8582.9141 C-7796.9355 8583.3506 -7795.1079 8583.7041 -7793.0479 8583.3984 C-7793.3169 8584.2461 -7794.1675 8584.4414 Vf-7884.2578 8584.2422 m-7884.1855 8584.4063 -7883.9497 8584.4961 -7884.1377 8584.7139 C-7884.1611 8584.5605 -7884.2822 8584.3887 -7884.2578 8584.2422 Cf-7877.9619 8585.9297 m-7877.9536 8585.8809 -7877.8721 8585.9961 -7877.8521 8586.0225 C-7877.9297 8586.0352 -7878.0024 8586.1729 -7878.0645 8586.0879 C-7877.9854 8586.0762 -7877.9976 8585.998 -7877.9619 8585.9297 Cf-7876.3521 8586.0273 m-7876.3765 8586.1729 -7876.7207 8586.2891 -7876.9238 8586.3066 C-7876.3521 8586.0273 Lf-7874.8521 8586.6289 m-7874.7227 8586.752 -7874.7583 8586.8193 -7874.9326 8586.8154 C-7874.9453 8586.7383 -7874.8877 8586.6992 -7874.8521 8586.6289 Cf-7874.7456 8586.2969 m-7874.6211 8586.293 -7874.5591 8586.3789 -7874.4985 8586.4629 C-7874.5029 8586.3369 -7874.7871 8586.541 -7874.7456 8586.2969 Cf-7871.4893 8586.7207 m-7871.4111 8586.709 -7871.2417 8586.5879 -7871.1689 8586.75 C-7871.2505 8586.6367 -7871.5498 8586.9346 -7871.4893 8586.7207 Cf-7869.9761 8586.5 m-7869.9272 8586.5098 -7869.9072 8586.5361 -7869.8506 8586.4961 C-7869.7607 8586.5625 -7869.8555 8586.6689 -7869.9312 8586.6826 C-7869.9761 8586.5 Lf-7842.4287 8585.9141 m-7842.5923 8585.9863 L-7842.5684 8585.8418 L-7842.4287 8585.9141 Lf-7830.3574 8585.9063 m-7830.1943 8585.8145 -7830.2441 8586.043 -7830.2168 8586.0645 C-7830.3643 8586.0801 -7830.1621 8585.8848 -7830.3574 8585.9063 Cf-7823.8486 8585.1777 m-7823.8984 8585.1816 L-7823.8818 8584.8818 L-7823.8486 8585.1777 LfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -(ush Tool/ Charcoal/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat 4/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa(Black)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 A1 Ap0 O0.556863 0.439216 0.917647 0.278431 0.4 0.4 0.2 Xa0 J 0 j 1 w 4 M []0 d0 XR297.0005 530.1963 m99.9272 530.1963 L99.9272 727.2695 L297.0005 727.2695 L297.0005 530.1963 Lf0.419608 0.313725 0.701961 0.047059 0.596078 0.592157 0.396078 Xa523.4053 530.1963 m326.332 530.1963 L326.332 727.2695 L523.4053 727.2695 L523.4053 530.1963 Lf0.223529 0.12549 0.470588 0 0.792157 0.796078 0.596078 Xa296.9995 297.376 m99.9268 297.376 L99.9268 494.4478 L296.9995 494.4478 L296.9995 297.376 Lf0.015686 0 0.231373 0 0.988235 0.972549 0.807843 Xa523.4053 297.376 m326.332 297.376 L326.332 494.4478 L523.4053 494.4478 L523.4053 297.376 Lf0.623529 0.639216 0.603922 0.490196 0.27451 0.235294 0.235294 Xa297.916 56.3047 m100.8433 56.3047 L100.8433 253.3779 L297.916 253.3779 L297.916 56.3047 Lf0.266667 0.901961 0.803922 0.223529 0.6 0.2 0.2 Xa528.9033 56.3047 m331.8311 56.3047 L331.8311 253.3779 L528.9033 253.3779 L528.9033 56.3047 Lfuu*u0 Ap0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa120.811 601.939 m122.0591 611.3477 L118.123 611.3477 L118.123 614.1802 L122.4912 614.1802 L123.4033 621.1406 L119.2749 621.1406 L119.2749 623.9727 L123.8354 623.9727 L125.0835 633.1416 L127.8677 633.1416 L126.6675 623.9727 L131.6602 623.9727 L132.9082 633.1416 L135.7402 633.1416 L134.54 623.9727 L138.4766 623.9727 L138.4766 621.1406 L134.1084 621.1406 L133.2441 614.1802 L137.3726 614.1802 L137.3726 611.3477 L132.812 611.3477 L131.564 601.939 L128.6836 601.939 L129.9316 611.3477 L124.9395 611.3477 L123.6914 601.939 L120.811 601.939 lf1 D130.3638 614.1802 m131.2759 621.1406 L126.2837 621.1406 L125.3716 614.1802 L130.3638 614.1802 lf*U*u0 D160.1719 630.1655 m159.3081 630.2134 158.2041 630.1655 157.0039 629.9736 c150.3794 628.8691 146.875 624.021 146.1548 618.8843 c146.2988 618.8843 L147.7871 620.8525 150.3794 622.4849 153.8354 622.4849 c159.356 622.4849 163.2441 618.5005 163.2441 612.4038 c163.2441 606.6914 159.356 601.4111 152.8755 601.4111 c146.2031 601.4111 141.8345 606.5952 141.8345 614.708 c141.8345 620.8525 144.043 625.7012 147.1152 628.7734 c149.707 631.3174 153.1636 632.9019 157.0996 633.3818 c158.3481 633.5737 159.4043 633.6216 160.1719 633.6216 C160.1719 630.1655 lf1 D152.9233 604.6753 m156.5239 604.6753 158.9722 607.6992 158.9722 612.1641 c158.9722 616.6284 156.4277 619.3164 152.5396 619.3164 c149.9951 619.3164 147.6431 617.7324 146.4907 615.4761 c146.2031 614.9961 146.0107 614.3721 146.0107 613.604 c146.1069 608.4678 148.459 604.6753 152.8755 604.6753 C152.9233 604.6753 lf*U*u0 D184.7954 630.1655 m183.9312 630.2134 182.8271 630.1655 181.627 629.9736 c175.0024 628.8691 171.498 624.021 170.7783 618.8843 c170.9224 618.8843 L172.4102 620.8525 175.0024 622.4849 178.459 622.4849 c183.9795 622.4849 187.8677 618.5005 187.8677 612.4038 c187.8677 606.6914 183.9795 601.4111 177.499 601.4111 c170.8262 601.4111 166.458 606.5952 166.458 614.708 c166.458 620.8525 168.666 625.7012 171.7383 628.7734 c174.3306 631.3174 177.7866 632.9019 181.7231 633.3818 c182.9712 633.5737 184.0273 633.6216 184.7954 633.6216 C184.7954 630.1655 lf1 D177.5469 604.6753 m181.147 604.6753 183.5952 607.6992 183.5952 612.1641 c183.5952 616.6284 181.0513 619.3164 177.1626 619.3164 c174.6187 619.3164 172.2661 617.7324 171.1143 615.4761 c170.8262 614.9961 170.6343 614.3721 170.6343 613.604 c170.73 608.4678 173.0825 604.6753 177.499 604.6753 C177.5469 604.6753 lf*U*u0 D209.4189 630.1655 m208.5547 630.2134 207.4507 630.1655 206.2505 629.9736 c199.626 628.8691 196.1216 624.021 195.4014 618.8843 c195.5454 618.8843 L197.0337 620.8525 199.626 622.4849 203.082 622.4849 c208.6025 622.4849 212.4912 618.5005 212.4912 612.4038 c212.4912 606.6914 208.6025 601.4111 202.1221 601.4111 c195.4497 601.4111 191.0811 606.5952 191.0811 614.708 c191.0811 620.8525 193.2891 625.7012 196.3613 628.7734 c198.9536 631.3174 202.4102 632.9019 206.3467 633.3818 c207.5947 633.5737 208.6504 633.6216 209.4189 633.6216 C209.4189 630.1655 lf1 D202.1699 604.6753 m205.7705 604.6753 208.2188 607.6992 208.2188 612.1641 c208.2188 616.6284 205.6743 619.3164 201.7861 619.3164 c199.2417 619.3164 196.8896 617.7324 195.7373 615.4761 c195.4497 614.9961 195.2573 614.3721 195.2573 613.604 c195.3535 608.4678 197.7056 604.6753 202.1221 604.6753 C202.1699 604.6753 lf*U*u0 D234.042 630.1655 m233.1777 630.2134 232.0737 630.1655 230.8735 629.9736 c224.249 628.8691 220.7446 624.021 220.0249 618.8843 c220.1689 618.8843 L221.6567 620.8525 224.249 622.4849 227.7056 622.4849 c233.2261 622.4849 237.1143 618.5005 237.1143 612.4038 c237.1143 606.6914 233.2261 601.4111 226.7451 601.4111 c220.0728 601.4111 215.7046 606.5952 215.7046 614.708 c215.7046 620.8525 217.9126 625.7012 220.9849 628.7734 c223.5771 631.3174 227.0332 632.9019 230.9697 633.3818 c232.2178 633.5737 233.2739 633.6216 234.042 633.6216 C234.042 630.1655 lf1 D226.7935 604.6753 m230.3936 604.6753 232.8418 607.6992 232.8418 612.1641 c232.8418 616.6284 230.2979 619.3164 226.4092 619.3164 c223.8652 619.3164 221.5127 617.7324 220.3608 615.4761 c220.0728 614.9961 219.8809 614.3721 219.8809 613.604 c219.9766 608.4678 222.3291 604.6753 226.7451 604.6753 C226.7935 604.6753 lf*U*u0 D241.8638 606.7876 m243.064 606.0195 245.8481 604.8193 248.7764 604.8193 c254.2007 604.8193 255.8809 608.2754 255.833 610.8677 c255.7852 615.2363 251.8486 617.1084 247.7686 617.1084 c245.416 617.1084 L245.416 620.2764 L247.7686 620.2764 L250.8408 620.2764 254.729 621.8608 254.729 625.5571 c254.729 628.0532 253.145 630.2612 249.2563 630.2612 c246.7603 630.2612 244.3599 629.1572 243.0161 628.1973 c241.9116 631.2695 L243.5439 632.4697 246.7124 633.6699 250.0728 633.6699 c256.2173 633.6699 259.0015 630.0215 259.0015 626.229 c259.0015 623.0127 257.0811 620.2764 253.2407 618.8843 c253.2407 618.7886 L257.0811 618.0205 260.2012 615.1401 260.2012 610.7715 c260.2012 605.7793 256.313 601.4111 248.8242 601.4111 c245.3203 601.4111 242.248 602.5151 240.7119 603.5229 C241.8638 606.7876 lf*U*u266.4873 606.7876 m267.687 606.0195 270.4717 604.8193 273.3999 604.8193 c278.8242 604.8193 280.5044 608.2754 280.4565 610.8677 c280.4082 615.2363 276.4722 617.1084 272.3916 617.1084 c270.0396 617.1084 L270.0396 620.2764 L272.3916 620.2764 L275.4639 620.2764 279.3521 621.8608 279.3521 625.5571 c279.3521 628.0532 277.7681 630.2612 273.8799 630.2612 c271.3838 630.2612 268.9834 629.1572 267.6392 628.1973 c266.5352 631.2695 L268.1675 632.4697 271.3354 633.6699 274.6958 633.6699 c280.8403 633.6699 283.6245 630.0215 283.6245 626.229 c283.6245 623.0127 281.7046 620.2764 277.8643 618.8843 c277.8643 618.7886 L281.7046 618.0205 284.8247 615.1401 284.8247 610.7715 c284.8247 605.7793 280.9365 601.4111 273.4478 601.4111 c269.9434 601.4111 266.8711 602.5151 265.335 603.5229 C266.4873 606.7876 lf*UUUuu*u339.7998 598.4355 m341.0479 607.8442 L337.1113 607.8442 L337.1113 610.6768 L341.4795 610.6768 L342.3916 617.6372 L338.2637 617.6372 L338.2637 620.4692 L342.8232 620.4692 L344.0713 629.6382 L346.8555 629.6382 L345.6563 620.4692 L350.6484 620.4692 L351.8965 629.6382 L354.7285 629.6382 L353.5283 620.4692 L357.4648 620.4692 L357.4648 617.6372 L353.0967 617.6372 L352.2324 610.6768 L356.3604 610.6768 L356.3604 607.8442 L351.8008 607.8442 L350.5527 598.4355 L347.6719 598.4355 L348.9199 607.8442 L343.9277 607.8442 L342.6797 598.4355 L339.7998 598.4355 lf1 D349.3525 610.6768 m350.2646 617.6372 L345.2715 617.6372 L344.3594 610.6768 L349.3525 610.6768 lf*U*u0 D363.7988 601.4116 m364.7109 601.3159 365.7676 601.4116 367.207 601.5557 c369.6553 601.8916 371.96 602.8999 373.7363 604.5801 c375.7998 606.4521 377.2881 609.1885 377.8643 612.8848 c377.7207 612.8848 L375.9922 610.7725 373.4961 609.5244 370.376 609.5244 c364.7588 609.5244 361.1592 613.749 361.1592 619.0771 c361.1592 624.9819 365.4316 630.1665 371.8154 630.1665 c378.2002 630.1665 382.1367 624.9819 382.1367 617.0132 c382.1367 610.1484 379.832 605.3481 376.7598 602.3721 c374.3604 600.0195 371.0479 598.5796 367.6875 598.1953 c366.1514 597.9556 364.8076 597.9077 363.7988 597.9556 C363.7988 601.4116 lf1 D371.4316 626.9502 m367.8799 626.9502 365.335 623.7817 365.335 619.3652 c365.335 615.4771 367.6875 612.7407 371.3359 612.7407 c374.168 612.7407 376.376 614.1328 377.4805 616.0049 c377.7207 616.3892 377.8643 616.8691 377.8643 617.541 c377.8643 622.8696 375.8965 626.9502 371.4795 626.9502 C371.4316 626.9502 lf*U*u0 D388.4219 601.4116 m389.334 601.3159 390.3906 601.4116 391.8311 601.5557 c394.2793 601.8916 396.583 602.8999 398.3594 604.5801 c400.4238 606.4521 401.9111 609.1885 402.4873 612.8848 c402.3438 612.8848 L400.6152 610.7725 398.1191 609.5244 394.999 609.5244 c389.3828 609.5244 385.7822 613.749 385.7822 619.0771 c385.7822 624.9819 390.0547 630.1665 396.4395 630.1665 c402.8232 630.1665 406.7598 624.9819 406.7598 617.0132 c406.7598 610.1484 404.4561 605.3481 401.3838 602.3721 c398.9834 600.0195 395.6709 598.5796 392.3105 598.1953 c390.7744 597.9556 389.4307 597.9077 388.4219 597.9556 C388.4219 601.4116 lf1 D396.0547 626.9502 m392.5029 626.9502 389.959 623.7817 389.959 619.3652 c389.959 615.4771 392.3105 612.7407 395.959 612.7407 c398.791 612.7407 400.999 614.1328 402.1035 616.0049 c402.3438 616.3892 402.4873 616.8691 402.4873 617.541 c402.4873 622.8696 400.5195 626.9502 396.1035 626.9502 C396.0547 626.9502 lf*U*u0 D413.0459 601.4116 m413.958 601.3159 415.0137 601.4116 416.4541 601.5557 c418.9023 601.8916 421.2061 602.8999 422.9824 604.5801 c425.0469 606.4521 426.5352 609.1885 427.1113 612.8848 c426.9668 612.8848 L425.2383 610.7725 422.7422 609.5244 419.6221 609.5244 c414.0059 609.5244 410.4053 613.749 410.4053 619.0771 c410.4053 624.9819 414.6777 630.1665 421.0625 630.1665 c427.4473 630.1665 431.3828 624.9819 431.3828 617.0132 c431.3828 610.1484 429.0791 605.3481 426.0068 602.3721 c423.6064 600.0195 420.2939 598.5796 416.9336 598.1953 c415.3975 597.9556 414.0537 597.9077 413.0459 597.9556 C413.0459 601.4116 lf1 D420.6787 626.9502 m417.126 626.9502 414.582 623.7817 414.582 619.3652 c414.582 615.4771 416.9336 612.7407 420.582 612.7407 c423.4141 612.7407 425.623 614.1328 426.7266 616.0049 c426.9668 616.3892 427.1113 616.8691 427.1113 617.541 c427.1113 622.8696 425.1426 626.9502 420.7266 626.9502 C420.6787 626.9502 lf*U*u0 D437.6689 601.4116 m438.5811 601.3159 439.6367 601.4116 441.0771 601.5557 c443.5254 601.8916 445.8301 602.8999 447.6055 604.5801 c449.6699 606.4521 451.1582 609.1885 451.7344 612.8848 c451.5898 612.8848 L449.8623 610.7725 447.3662 609.5244 444.2451 609.5244 c438.6289 609.5244 435.0283 613.749 435.0283 619.0771 c435.0283 624.9819 439.3008 630.1665 445.6855 630.1665 c452.0703 630.1665 456.0068 624.9819 456.0068 617.0132 c456.0068 610.1484 453.7021 605.3481 450.6299 602.3721 c448.2295 600.0195 444.918 598.5796 441.5576 598.1953 c440.0215 597.9556 438.6768 597.9077 437.6689 597.9556 C437.6689 601.4116 lf1 D445.3018 626.9502 m441.749 626.9502 439.2051 623.7817 439.2051 619.3652 c439.2051 615.4771 441.5576 612.7407 445.2061 612.7407 c448.0381 612.7407 450.2461 614.1328 451.3506 616.0049 c451.5898 616.3892 451.7344 616.8691 451.7344 617.541 c451.7344 622.8696 449.7656 626.9502 445.3496 626.9502 C445.3018 626.9502 lf*U*u0 D477.6533 626.6621 m476.7891 626.71 475.6855 626.6621 474.4854 626.4697 c467.8604 625.3657 464.3564 620.5176 463.6367 615.3809 c463.7803 615.3809 L465.2686 617.3491 467.8604 618.9814 471.3174 618.9814 c476.8379 618.9814 480.7256 614.9971 480.7256 608.9004 c480.7256 603.188 476.8379 597.9077 470.3574 597.9077 c463.6846 597.9077 459.3164 603.0918 459.3164 611.2046 c459.3164 617.3491 461.5244 622.1978 464.5967 625.27 c467.1885 627.814 470.6445 629.3984 474.5811 629.8784 c475.8291 630.0703 476.8857 630.1182 477.6533 630.1182 C477.6533 626.6621 lf1 D470.4053 601.1719 m474.0049 601.1719 476.4531 604.1963 476.4531 608.6606 c476.4531 613.125 473.9092 615.813 470.0205 615.813 c467.4766 615.813 465.124 614.229 463.9727 611.9727 c463.6846 611.4927 463.4922 610.8687 463.4922 610.1006 c463.5879 604.9639 465.9404 601.1719 470.3574 601.1719 C470.4053 601.1719 lf*U*u0 D502.2773 626.6621 m501.4131 626.71 500.3086 626.6621 499.1084 626.4697 c492.4844 625.3657 488.9795 620.5176 488.2598 615.3809 c488.4033 615.3809 L489.8916 617.3491 492.4844 618.9814 495.9404 618.9814 c501.4609 618.9814 505.3496 614.9971 505.3496 608.9004 c505.3496 603.188 501.4609 597.9077 494.9805 597.9077 c488.3076 597.9077 483.9395 603.0918 483.9395 611.2046 c483.9395 617.3491 486.1475 622.1978 489.2197 625.27 c491.8115 627.814 495.2686 629.3984 499.2051 629.8784 c500.4531 630.0703 501.5088 630.1182 502.2773 630.1182 C502.2773 626.6621 lf1 D495.0283 601.1719 m498.6289 601.1719 501.0771 604.1963 501.0771 608.6606 c501.0771 613.125 498.5322 615.813 494.6445 615.813 c492.0996 615.813 489.748 614.229 488.5957 611.9727 c488.3076 611.4927 488.1152 610.8687 488.1152 610.1006 c488.2119 604.9639 490.5635 601.1719 494.9805 601.1719 C495.0283 601.1719 lf*UUUuu*u0 D126.811 391.9414 m128.0591 401.3501 L124.123 401.3501 L124.123 404.1826 L128.4912 404.1826 L129.4033 411.1431 L125.2749 411.1431 L125.2749 413.9751 L129.8354 413.9751 L131.0835 423.144 L133.8677 423.144 L132.6675 413.9751 L137.6602 413.9751 L138.9082 423.144 L141.7402 423.144 L140.54 413.9751 L144.4766 413.9751 L144.4766 411.1431 L140.1084 411.1431 L139.2441 404.1826 L143.3726 404.1826 L143.3726 401.3501 L138.812 401.3501 L137.564 391.9414 L134.6836 391.9414 L135.9316 401.3501 L130.9395 401.3501 L129.6914 391.9414 L126.811 391.9414 lf1 D136.3638 404.1826 m137.2759 411.1431 L132.2837 411.1431 L131.3716 404.1826 L136.3638 404.1826 lf*UUu*u0 D166.2681 392.8057 m165.1636 392.2295 162.7158 391.4131 159.5952 391.4131 c152.5869 391.4131 148.0264 396.2139 148.0264 403.3184 c148.0264 410.4712 152.9229 415.6553 160.5073 415.6553 c163.0034 415.6553 165.2119 415.0313 166.3638 414.4556 c165.4038 411.1909 L164.3955 411.7671 162.8115 412.2949 160.5073 412.2949 c155.1787 412.2949 152.2988 408.3589 152.2988 403.5103 c152.2988 398.1338 155.7549 394.8213 160.3633 394.8213 c162.7637 394.8213 164.3477 395.4458 165.5479 395.9736 C166.2681 392.8057 lf*U*u187.4839 392.8057 m186.3799 392.2295 183.9316 391.4131 180.8115 391.4131 c173.8027 391.4131 169.2422 396.2139 169.2422 403.3184 c169.2422 410.4712 174.1387 415.6553 181.7236 415.6553 c184.2197 415.6553 186.4277 415.0313 187.5801 414.4556 c186.6201 411.1909 L185.6118 411.7671 184.0278 412.2949 181.7236 412.2949 c176.395 412.2949 173.5146 408.3589 173.5146 403.5103 c173.5146 398.1338 176.9712 394.8213 181.5796 394.8213 c183.9795 394.8213 185.564 395.4458 186.7637 395.9736 C187.4839 392.8057 lf*U*u208.7002 392.8057 m207.5957 392.2295 205.1475 391.4131 202.0273 391.4131 c195.019 391.4131 190.4585 396.2139 190.4585 403.3184 c190.4585 410.4712 195.355 415.6553 202.9395 415.6553 c205.4355 415.6553 207.644 415.0313 208.7959 414.4556 c207.8359 411.1909 L206.8276 411.7671 205.2437 412.2949 202.9395 412.2949 c197.6108 412.2949 194.731 408.3589 194.731 403.5103 c194.731 398.1338 198.187 394.8213 202.7954 394.8213 c205.1958 394.8213 206.7798 395.4458 207.98 395.9736 C208.7002 392.8057 lf*UUu*u229.9165 392.8057 m228.812 392.2295 226.3643 391.4131 223.2437 391.4131 c216.2354 391.4131 211.6748 396.2139 211.6748 403.3184 c211.6748 410.4712 216.5713 415.6553 224.1558 415.6553 c226.6519 415.6553 228.8604 415.0313 230.0122 414.4556 c229.0522 411.1909 L228.0439 411.7671 226.46 412.2949 224.1558 412.2949 c218.8271 412.2949 215.9473 408.3589 215.9473 403.5103 c215.9473 398.1338 219.4033 394.8213 224.0117 394.8213 c226.4121 394.8213 227.9961 395.4458 229.1963 395.9736 C229.9165 392.8057 lf*U*u235.9629 394.918 m236.875 394.8213 237.9312 394.918 239.3711 395.0615 c241.8193 395.3975 244.1235 396.4058 245.8999 398.0859 c247.9639 399.958 249.4521 402.6943 250.0283 406.3906 c249.8843 406.3906 L248.1558 404.2783 245.6597 403.0303 242.5396 403.0303 c236.9229 403.0303 233.3228 407.2549 233.3228 412.583 c233.3228 418.4878 237.5952 423.6724 243.9795 423.6724 c250.3643 423.6724 254.3003 418.4878 254.3003 410.519 c254.3003 403.6543 251.9961 398.854 248.9238 395.8779 c246.5239 393.5254 243.2114 392.085 239.8511 391.7012 c238.3149 391.4609 236.9712 391.4131 235.9629 391.4609 C235.9629 394.918 lf1 D243.5957 420.4561 m240.0435 420.4561 237.499 417.2876 237.499 412.8711 c237.499 408.9829 239.8511 406.2466 243.4995 406.2466 c246.332 406.2466 248.54 407.6387 249.644 409.5107 c249.8843 409.895 250.0283 410.375 250.0283 411.0469 c250.0283 416.3755 248.0601 420.4561 243.6436 420.4561 C243.5957 420.4561 lf*U*u0 D260.5859 394.918 m261.498 394.8213 262.5542 394.918 263.9946 395.0615 c266.4429 395.3975 268.7471 396.4058 270.5229 398.0859 c272.5874 399.958 274.0752 402.6943 274.6514 406.3906 c274.5073 406.3906 L272.7793 404.2783 270.2832 403.0303 267.1626 403.0303 c261.5464 403.0303 257.9458 407.2549 257.9458 412.583 c257.9458 418.4878 262.2183 423.6724 268.603 423.6724 c274.9873 423.6724 278.9238 418.4878 278.9238 410.519 c278.9238 403.6543 276.6196 398.854 273.5474 395.8779 c271.147 393.5254 267.835 392.085 264.4746 391.7012 c262.9385 391.4609 261.5942 391.4131 260.5859 391.4609 C260.5859 394.918 lf1 D268.2188 420.4561 m264.6665 420.4561 262.1221 417.2876 262.1221 412.8711 c262.1221 408.9829 264.4746 406.2466 268.123 406.2466 c270.9551 406.2466 273.1631 407.6387 274.2676 409.5107 c274.5073 409.895 274.6514 410.375 274.6514 411.0469 c274.6514 416.3755 272.6831 420.4561 268.2666 420.4561 C268.2188 420.4561 lf*UUUuu*u0 D342.7998 385.4385 m344.0479 394.8477 L340.1113 394.8477 L340.1113 397.6797 L344.4795 397.6797 L345.3916 404.6401 L341.2637 404.6401 L341.2637 407.4722 L345.8232 407.4722 L347.0713 416.6411 L349.8555 416.6411 L348.6563 407.4722 L353.6484 407.4722 L354.8965 416.6411 L357.7285 416.6411 L356.5283 407.4722 L360.4648 407.4722 L360.4648 404.6401 L356.0967 404.6401 L355.2324 397.6797 L359.3604 397.6797 L359.3604 394.8477 L354.8008 394.8477 L353.5527 385.4385 L350.6719 385.4385 L351.9199 394.8477 L346.9277 394.8477 L345.6797 385.4385 L342.7998 385.4385 lf1 D352.3525 397.6797 m353.2646 404.6401 L348.2715 404.6401 L347.3594 397.6797 L352.3525 397.6797 lf*U*u0 D365.8389 417.7935 m383.2646 417.7935 L383.2646 414.2891 L370.0156 414.2891 L370.0156 403.5361 L382.2568 403.5361 L382.2568 400.0796 L370.0156 400.0796 L370.0156 385.4385 L365.8389 385.4385 L365.8389 417.7935 lf*U*u389.2148 417.7935 m406.6406 417.7935 L406.6406 414.2891 L393.3916 414.2891 L393.3916 403.5361 L405.6328 403.5361 L405.6328 400.0796 L393.3916 400.0796 L393.3916 385.4385 L389.2148 385.4385 L389.2148 417.7935 lf*U*u412.5908 417.7935 m430.0166 417.7935 L430.0166 414.2891 L416.7676 414.2891 L416.7676 403.5361 L429.0088 403.5361 L429.0088 400.0796 L416.7676 400.0796 L416.7676 385.4385 L412.5908 385.4385 L412.5908 417.7935 lf*U*u435.9668 417.7935 m453.3926 417.7935 L453.3926 414.2891 L440.1436 414.2891 L440.1436 403.5361 L452.3848 403.5361 L452.3848 400.0796 L440.1436 400.0796 L440.1436 385.4385 L435.9668 385.4385 L435.9668 417.7935 lf*UUu*u481.9521 386.4941 m480.416 385.7266 477.3438 384.9102 473.4082 384.9102 c464.2871 384.9102 457.4229 390.7188 457.4229 401.3276 c457.4229 411.4565 464.2871 418.3213 474.3203 418.3213 c478.3525 418.3213 480.8965 417.457 482.001 416.8813 c480.9922 413.4727 L479.4082 414.2412 477.1523 414.8169 474.4639 414.8169 c466.8789 414.8169 461.8389 409.9688 461.8389 401.4717 c461.8389 393.5508 466.3994 388.4629 474.2715 388.4629 c476.8164 388.4629 479.4082 388.9912 481.0889 389.8066 C481.9521 386.4941 lf*UUu*u508.7842 386.4941 m507.248 385.7266 504.1758 384.9102 500.2402 384.9102 c491.1191 384.9102 484.2549 390.7188 484.2549 401.3276 c484.2549 411.4565 491.1191 418.3213 501.1523 418.3213 c505.1846 418.3213 507.7285 417.457 508.833 416.8813 c507.8242 413.4727 L506.2402 414.2412 503.9844 414.8169 501.2959 414.8169 c493.7109 414.8169 488.6709 409.9688 488.6709 401.4717 c488.6709 393.5508 493.2314 388.4629 501.1035 388.4629 c503.6484 388.4629 506.2402 388.9912 507.9209 389.8066 C508.7842 386.4941 lf*UUUuu*u0 0 0 0 1 1 1 Xa116.3105 139.9473 m117.5586 149.3564 L113.6226 149.3564 L113.6226 152.1885 L117.9907 152.1885 L118.9028 159.1484 L114.7744 159.1484 L114.7744 161.9814 L119.335 161.9814 L120.583 171.1504 L123.3672 171.1504 L122.167 161.9814 L127.1597 161.9814 L128.4077 171.1504 L131.2397 171.1504 L130.0396 161.9814 L133.9761 161.9814 L133.9761 159.1484 L129.6079 159.1484 L128.7437 152.1885 L132.8721 152.1885 L132.8721 149.3564 L128.3115 149.3564 L127.0635 139.9473 L124.1831 139.9473 L125.4312 149.3564 L120.439 149.3564 L119.1909 139.9473 L116.3105 139.9473 lf1 D125.8633 152.1885 m126.7754 159.1484 L121.7832 159.1484 L120.8711 152.1885 L125.8633 152.1885 lf*U*u0 D150.9194 139.9473 m150.9194 148.4443 L136.4219 148.4443 L136.4219 151.2285 L150.3433 171.1504 L154.9033 171.1504 L154.9033 151.7559 L159.272 151.7559 L159.272 148.4443 L154.9033 148.4443 L154.9033 139.9473 L150.9194 139.9473 lf1 D150.9194 151.7559 m150.9194 162.1729 L150.9194 163.8057 150.9673 165.4375 151.0635 167.0693 c150.9194 167.0693 L149.959 165.2451 149.1909 163.9014 148.3271 162.4609 c140.6943 151.8525 L140.6943 151.7559 L150.9194 151.7559 lf*U*u0 D180.2949 168.1738 m179.4307 168.2217 178.3267 168.1738 177.1265 167.9814 c170.502 166.8779 166.9976 162.0293 166.2778 156.8926 c166.4219 156.8926 L167.9097 158.8613 170.502 160.4932 173.9585 160.4932 c179.479 160.4932 183.3672 156.5088 183.3672 150.4121 c183.3672 144.6992 179.479 139.4189 172.998 139.4189 c166.3257 139.4189 161.9575 144.6035 161.9575 152.7168 c161.9575 158.8613 164.1655 163.709 167.2378 166.7813 c169.8301 169.3262 173.2861 170.9102 177.2227 171.3896 c178.4707 171.582 179.5269 171.6299 180.2949 171.6299 C180.2949 168.1738 lf1 D173.0464 142.6836 m176.6465 142.6836 179.0947 145.708 179.0947 150.1719 c179.0947 154.6367 176.5508 157.3252 172.6621 157.3252 c170.1182 157.3252 167.7656 155.7402 166.6138 153.4844 c166.3257 153.0039 166.1338 152.3799 166.1338 151.6123 c166.2295 146.4756 168.582 142.6836 172.998 142.6836 C173.0464 142.6836 lf*U*u0 D188.1167 144.7959 m189.3169 144.0273 192.1011 142.8271 195.0293 142.8271 c200.4536 142.8271 202.1338 146.2842 202.0859 148.876 c202.0381 153.2441 198.1016 155.1162 194.0215 155.1162 c191.6689 155.1162 L191.6689 158.2852 L194.0215 158.2852 L197.0938 158.2852 200.9819 159.8691 200.9819 163.5654 c200.9819 166.0615 199.3979 168.2695 195.5093 168.2695 c193.0132 168.2695 190.6128 167.166 189.269 166.2051 c188.1646 169.2773 L189.7969 170.4775 192.9653 171.6777 196.3257 171.6777 c202.4702 171.6777 205.2544 168.0293 205.2544 164.2373 c205.2544 161.0215 203.334 158.2852 199.4937 156.8926 c199.4937 156.7969 L203.334 156.0283 206.4541 153.1484 206.4541 148.7803 c206.4541 143.7871 202.5659 139.4189 195.0771 139.4189 c191.5732 139.4189 188.501 140.5234 186.9648 141.5313 C188.1167 144.7959 lf*U*u235.8301 141.0029 m234.2939 140.2354 231.2217 139.4189 227.2852 139.4189 c218.1646 139.4189 211.2998 145.2275 211.2998 155.8369 c211.2998 165.9658 218.1646 172.8301 228.1973 172.8301 c232.2295 172.8301 234.7739 171.9658 235.8779 171.3896 c234.8701 167.9814 L233.2856 168.75 231.0298 169.3262 228.3413 169.3262 c220.7568 169.3262 215.7163 164.4775 215.7163 155.9805 c215.7163 148.0596 220.2769 142.9717 228.1494 142.9717 c230.6934 142.9717 233.2856 143.5 234.9658 144.3154 C235.8301 141.0029 lf*U*u240.5796 144.7959 m241.7793 144.0273 244.564 142.8271 247.4922 142.8271 c252.9165 142.8271 254.5967 146.2842 254.5488 148.876 c254.5005 153.2441 250.5645 155.1162 246.4839 155.1162 c244.1318 155.1162 L244.1318 158.2852 L246.4839 158.2852 L249.5562 158.2852 253.4443 159.8691 253.4443 163.5654 c253.4443 166.0615 251.8604 168.2695 247.9722 168.2695 c245.4756 168.2695 243.0757 167.166 241.7314 166.2051 c240.6274 169.2773 L242.2598 170.4775 245.4277 171.6777 248.7881 171.6777 c254.9326 171.6777 257.7168 168.0293 257.7168 164.2373 c257.7168 161.0215 255.7969 158.2852 251.9565 156.8926 c251.9565 156.7969 L255.7969 156.0283 258.917 153.1484 258.917 148.7803 c258.917 143.7871 255.0288 139.4189 247.54 139.4189 c244.0356 139.4189 240.9634 140.5234 239.4272 141.5313 C240.5796 144.7959 lf*U*u288.2925 141.0029 m286.7563 140.2354 283.6841 139.4189 279.748 139.4189 c270.627 139.4189 263.7627 145.2275 263.7627 155.8369 c263.7627 165.9658 270.627 172.8301 280.6602 172.8301 c284.6924 172.8301 287.2368 171.9658 288.3408 171.3896 c287.3325 167.9814 L285.7485 168.75 283.4922 169.3262 280.8042 169.3262 c273.2192 169.3262 268.1787 164.4775 268.1787 155.9805 c268.1787 148.0596 272.7393 142.9717 280.6118 142.9717 c283.1563 142.9717 285.7485 143.5 287.4287 144.3154 C288.2925 141.0029 lf*UUUuu*u347.2998 143.9414 m348.5479 153.3506 L344.6113 153.3506 L344.6113 156.1826 L348.9795 156.1826 L349.8916 163.1426 L345.7637 163.1426 L345.7637 165.9756 L350.3232 165.9756 L351.5713 175.1445 L354.3555 175.1445 L353.1563 165.9756 L358.1484 165.9756 L359.3965 175.1445 L362.2285 175.1445 L361.0283 165.9756 L364.9648 165.9756 L364.9648 163.1426 L360.5967 163.1426 L359.7324 156.1826 L363.8604 156.1826 L363.8604 153.3506 L359.3008 153.3506 L358.0527 143.9414 L355.1719 143.9414 L356.4199 153.3506 L351.4277 153.3506 L350.1797 143.9414 L347.2998 143.9414 lf1 D356.8525 156.1826 m357.7646 163.1426 L352.7715 163.1426 L351.8594 156.1826 L356.8525 156.1826 lf*U*u0 D371.2988 146.918 m372.2109 146.8213 373.2676 146.918 374.707 147.0615 c377.1553 147.3975 379.46 148.4063 381.2363 150.0859 c383.2998 151.958 384.7881 154.6943 385.3643 158.3906 c385.2207 158.3906 L383.4922 156.2783 380.9961 155.0303 377.876 155.0303 c372.2588 155.0303 368.6592 159.2549 368.6592 164.583 c368.6592 170.4873 372.9316 175.6719 379.3154 175.6719 c385.7002 175.6719 389.6367 170.4873 389.6367 162.5186 c389.6367 155.6543 387.332 150.8535 384.2598 147.8779 c381.8604 145.5254 378.5479 144.085 375.1875 143.7012 c373.6514 143.4609 372.3076 143.4131 371.2988 143.4609 C371.2988 146.918 lf1 D378.9316 172.4561 m375.3799 172.4561 372.835 169.2871 372.835 164.8711 c372.835 160.9824 375.1875 158.2471 378.8359 158.2471 c381.668 158.2471 383.876 159.6387 384.9805 161.5107 c385.2207 161.8945 385.3643 162.375 385.3643 163.0469 c385.3643 168.376 383.3965 172.4561 378.9795 172.4561 C378.9316 172.4561 lf*U*u0 D395.9219 146.918 m396.834 146.8213 397.8906 146.918 399.3311 147.0615 c401.7793 147.3975 404.083 148.4063 405.8594 150.0859 c407.9238 151.958 409.4111 154.6943 409.9873 158.3906 c409.8438 158.3906 L408.1152 156.2783 405.6191 155.0303 402.499 155.0303 c396.8828 155.0303 393.2822 159.2549 393.2822 164.583 c393.2822 170.4873 397.5547 175.6719 403.9395 175.6719 c410.3232 175.6719 414.2598 170.4873 414.2598 162.5186 c414.2598 155.6543 411.9561 150.8535 408.8838 147.8779 c406.4834 145.5254 403.1709 144.085 399.8105 143.7012 c398.2744 143.4609 396.9307 143.4131 395.9219 143.4609 C395.9219 146.918 lf1 D403.5547 172.4561 m400.0029 172.4561 397.459 169.2871 397.459 164.8711 c397.459 160.9824 399.8105 158.2471 403.459 158.2471 c406.291 158.2471 408.499 159.6387 409.6035 161.5107 c409.8438 161.8945 409.9873 162.375 409.9873 163.0469 c409.9873 168.376 408.0195 172.4561 403.6035 172.4561 C403.5547 172.4561 lf*U*u0 D419.1055 148.79 m420.3057 148.0215 423.0898 146.8213 426.0186 146.8213 c431.4424 146.8213 433.123 150.2783 433.0752 152.8701 c433.0264 157.2383 429.0908 159.1104 425.0098 159.1104 c422.6582 159.1104 L422.6582 162.2793 L425.0098 162.2793 L428.082 162.2793 431.9707 163.8633 431.9707 167.5596 c431.9707 170.0557 430.3867 172.2637 426.498 172.2637 c424.002 172.2637 421.6016 171.1602 420.2578 170.1992 c419.1533 173.2715 L420.7861 174.4717 423.9541 175.6719 427.3145 175.6719 c433.459 175.6719 436.2432 172.0234 436.2432 168.2314 c436.2432 165.0156 434.3232 162.2793 430.4824 160.8867 c430.4824 160.791 L434.3232 160.0225 437.4434 157.1426 437.4434 152.7744 c437.4434 147.7813 433.5547 143.4131 426.0664 143.4131 c422.5615 143.4131 419.4893 144.5176 417.9531 145.5254 C419.1055 148.79 lf*U*u443.7285 148.79 m444.9287 148.0215 447.7129 146.8213 450.6416 146.8213 c456.0654 146.8213 457.7461 150.2783 457.6982 152.8701 c457.6504 157.2383 453.7139 159.1104 449.6338 159.1104 c447.2813 159.1104 L447.2813 162.2793 L449.6338 162.2793 L452.7061 162.2793 456.5938 163.8633 456.5938 167.5596 c456.5938 170.0557 455.0098 172.2637 451.1211 172.2637 c448.625 172.2637 446.2246 171.1602 444.8809 170.1992 c443.7764 173.2715 L445.4092 174.4717 448.5771 175.6719 451.9375 175.6719 c458.082 175.6719 460.8662 172.0234 460.8662 168.2314 c460.8662 165.0156 458.9463 162.2793 455.1055 160.8867 c455.1055 160.791 L458.9463 160.0225 462.0664 157.1426 462.0664 152.7744 c462.0664 147.7813 458.1777 143.4131 450.6895 143.4131 c447.1855 143.4131 444.1133 144.5176 442.5771 145.5254 C443.7285 148.79 lf*U*u468.3525 148.79 m469.5518 148.0215 472.3369 146.8213 475.2646 146.8213 c480.6895 146.8213 482.3691 150.2783 482.3213 152.8701 c482.2734 157.2383 478.3369 159.1104 474.2568 159.1104 c471.9043 159.1104 L471.9043 162.2793 L474.2568 162.2793 L477.3291 162.2793 481.2168 163.8633 481.2168 167.5596 c481.2168 170.0557 479.6328 172.2637 475.7451 172.2637 c473.248 172.2637 470.8486 171.1602 469.5039 170.1992 c468.4004 173.2715 L470.0322 174.4717 473.2002 175.6719 476.5605 175.6719 c482.7051 175.6719 485.4893 172.0234 485.4893 168.2314 c485.4893 165.0156 483.5693 162.2793 479.7295 160.8867 c479.7295 160.791 L483.5693 160.0225 486.6895 157.1426 486.6895 152.7744 c486.6895 147.7813 482.8018 143.4131 475.3125 143.4131 c471.8086 143.4131 468.7363 144.5176 467.2002 145.5254 C468.3525 148.79 lf*U*u492.9756 148.79 m494.1758 148.0215 496.96 146.8213 499.8877 146.8213 c505.3125 146.8213 506.9922 150.2783 506.9443 152.8701 c506.8965 157.2383 502.96 159.1104 498.8799 159.1104 c496.5273 159.1104 L496.5273 162.2793 L498.8799 162.2793 L501.9521 162.2793 505.8408 163.8633 505.8408 167.5596 c505.8408 170.0557 504.2568 172.2637 500.3682 172.2637 c497.8721 172.2637 495.4717 171.1602 494.1279 170.1992 c493.0234 173.2715 L494.6553 174.4717 497.8242 175.6719 501.1846 175.6719 c507.3291 175.6719 510.1133 172.0234 510.1133 168.2314 c510.1133 165.0156 508.1924 162.2793 504.3525 160.8867 c504.3525 160.791 L508.1924 160.0225 511.3125 157.1426 511.3125 152.7744 c511.3125 147.7813 507.4248 143.4131 499.9355 143.4131 c496.4316 143.4131 493.3594 144.5176 491.8232 145.5254 C492.9756 148.79 lf*UUULB%AI5_EndLayer--%AI3_BeginCropsuserdict /AI3_noCropMarks known not {0 Auu0 R1 1 1 1 ([Registration]) 0 XS0 J 0 j 0.5 w 4 M []0 d0 XR-9 0 m-36 0 LS0 -9 m0 -36 LSUu-9 792 m-36 792 LS0 801 m0 828 LSUu621 792 m648 792 LS612 801 m612 828 LSUu621 0 m648 0 LS612 -9 m612 -36 LSUU} if%AI3_EndCrops%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF